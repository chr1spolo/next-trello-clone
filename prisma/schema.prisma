// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userTeams     UserTeam[]
  Task Task[]
  Comment Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  members   UserTeam[]
  projects  Project[]

  invitations Invitation[]
}

model UserTeam {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  role      String   @default("MEMBER")
  
  user      User     @relation(fields: [userId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
  
  @@unique([userId, teamId])
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String?
  teamId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  team        Team      @relation(fields: [teamId], references: [id])
  tasks       Task[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("TO_DO") // TO_DO, IN_PROGRESS, DONE
  projectId   String
  assignedToId String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  project     Project   @relation(fields: [projectId], references: [id])
  assignedTo  User?     @relation(fields: [assignedToId], references: [id])
  comments    Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  task      Task     @relation(fields: [taskId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
}


model Invitation {
  id        String   @id @default(cuid())
  email     String
  teamId    String
  token     String   @unique
  status    String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt DateTime @default(now())
  expiresAt DateTime

  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}